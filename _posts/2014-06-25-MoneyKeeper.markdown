---
thumbnail: /assets/img/posts/MoneyKeeper/moneykeeper.png
title: MoneyKeeper - An Android money managing system
project: Money Keeper
category: [Project, Android app]
description: An Android application that manage your spending\
---
<p><strong>Status: <em>Released, Maintaining and Updating</em></strong><br /><br /><strong><a href="https://play.google.com/store/apps/details?id=com.DNH.moneykeeper" title="Money Keeper app">--- Get it on Android Play Store ---</a></strong><br /><br /></p>
<p style="text-align: left;">I bought my first Android phone (Nexus 4) during my internship, just after my third year of school. I was amazed of how wonderful this piece of technology is. It is like your own personal computer that you can carry around. &ldquo;Apps&rdquo; (applications) are the backbone of these devices. It is what makes it so greats. <br /><br /> One of the app I&rsquo;ve always wanted was a light, minimalistic looking money tracker to see my spending every day without having to input my banking information (e.g. &ldquo;Mint&rdquo;). None of the money tracker apps I searched really fulfilled all of my desires thus I decided to learn and make one of my own. This project is the first Android applications I developed.</p>
<p align="center"><br /><a href="https://play.google.com/store/apps/details?id=com.DNH.moneykeeper" target="_blank"><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_Promo.png" alt="Money Maker promo" /></a></p>
<p style="text-align: left;">One of the things that surprise me about making an Android application is that simple things actually take a lot efforts and code to implement. I have spent around 3 months developing this app and few more to refine and add more features to improve it. In this article, I want to briefly show you some of my design decisions and their implementations.<br /></p>
<p><strong>I. LAYOUT AND BACKBONE DESIGN</strong></p>
<p style="text-align: left;"> After using and researching several existing applications with similar functionalities, I&rsquo;ve came up with a skeleton layout for my design:<br /></p>
<p align="center"><strong>Figure 1. Draft preliminary design</strong><br /><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_sketch.jpg" alt="Money Maker sketch" /></p>
<p style="text-align: left;"><br /> The layout consists of three main screens which can be scrolled left or right:<br /> Main screen shows the current spending, recent history, and have a button to add new transactions.<br /> The History screen is used to provide a more detail, comprehensive past transactions. The Custom screen is where all the application features can be configured. Some of the future features description are also shown here.<br /></p>
<p align="center"><strong>Figure 2. The three main screens</strong><br /><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_screens.png" alt="Money Maker promo" /></p>
<p style="text-align: left;"> New transaction button will redirect users to a new screen that includes information field for input. For a more robust experience, income/expense can be switch by tapping the sign picture on the right and the date can be input using a date spinner. All these information will be saved in the main SQL database after the save button is clicked.<br /></p>
<p align="center"><strong>Figure 3. Transaction screen</strong><br /><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_save_screen.png" style="width: 50%;" /></p>
<p style="text-align: left;"><br /> The edit screen recycled this layout of the transaction screen but with data pulled from the database and displayed for users to change/edit. All entries can be edited by clicking a customized button on the right field of transaction list<br /><br /> The entries list made up a big portion of the layout. It contains quick information of the logged transaction entries. Clicking on an entry will reveal comments and the edit button.<br /><br /> All transactions are categorized in order to organize the information. These categories are stored in a separate SQL database. I&rsquo;ve implemented 8 default categories with custom icon. Users can add new categories however it will follow a default icon. (The ability for users to add their own graphic will be implemented in the future)<br /></p>
<p align="center"><strong>Figure 4. Categories list</strong><br /><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_category_screen.png" style="width: 50%;" /></p>
<p><br /><strong>II. ADDITIONAL FEATURES</strong><br /><br /></p>
<p style="text-align: left;">In addition to the core functions, I implemented several additional features improve the application operation.<br /> List of additional feature implemented.<br /> <br /> <em><strong>1) Goal</strong></em><br /> This feature is intended to give users the ability to set their spending goal of the day, month or year. The amount can be set on Custom panel and it will be displayed on the main Keeper panel. The main challenge in this implementation was to update the goal setting right after it you set it. This is because setting the goal amount was in a different activity while the panel was in a fragment activity. <br />  <br /> <em><strong>2. Password protected</strong></em><br /> Since this application will be storing sensitive financial information of the user, I think it is a good idea to have the ability restrict access for unintended user. There is currently 2 level of restriction: &ldquo;read-only&rdquo; or &ldquo;entire application&rdquo;. The &ldquo;read-only&rdquo; restriction will restrict the access to data currently reside in the database. Users will not be able to edit or enter new data. The other stricter restriction wills required users to enter a password before the application can be opened. There are also two methods of restrictions: loose and tight. The loose method will only require users to enter the password one time while the application is running. The tighter method will require users to enter password every time the data is altered. This proved to be a bit of an annoyance thus this method is still in beta until I came up with a better implementation. <br /> <br /><em><strong> 3. Multiple profiles</strong></em>: <br /> This is the latest feature added and also the most important. This feature will allow users to manipulate the SQL database. This will allow users to backup and import the database. This will prevent data lost in case the application got accidentally deleted. It will also allow for database to be transfer/sync to different device in the future. Another functionality this feature has is to allow users to create multiple different databases. This ability will make the application much more versatile. Users will be able to create database specific work expense, home expense, vacation&hellip; or have more than one user using the same application (this is however not recommended because password protected for separate users is not implemented).<br /><br /></p>
<p><strong>III. ART, GRAPHIC</strong><br /> </p>
<p align="center"><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_icon_evolve.png" /></p>
<p style="text-align: left;"> I wanted the visual graphics to be the &ldquo;selling point&rdquo; for this application. The things which make it stand out from the other bunch of apps in the android market with similar functionality. <br /> <br /> Although the last time I took art class was in grade 10 high school, I still believe that I have a good design skill. I&rsquo;ve created graphic using adobe illustrator for scalability and try to make it clean, modern, metro style:<br /></p>
<p align="center"><strong>Figure 5. Splash screen logo</strong><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\mylogo.png" style="width: 75%;" /><br /></p>
<p align="center"><strong>Figure 6. Categories Icon</strong><img class="img-responsive" src="{{ site.url }}{{ site.baseurl }}\assets\img\posts\MoneyKeeper\money_keeper_category_icons.png" style="width: 75%;"/></p>
<p><strong>IV. FUTURE FEATURES</strong><br/></p>
<p style="text-align: left;">
<strong>Widget</strong>: This is the next feature I&rsquo;d brke to implement because it would make it much more convenient for the user. The widget could be added to the home screen with the money balance amount and a button for quick add transaction.<br/><br/>
<strong>Cloud Sync</strong>: As discussed in the multiple database feature, this will be the next step to backup, restore data. Multiple devices can also be sync with the same database. I&rsquo;m planning to implement this for Dropbox or Google Drive.<br/><br/>
<strong>Schedule transaction</strong>: This is one of the features that are a bit harder to implement because it needs a background service constantly running. The idea is to have transactions add automatically for re-occurring income/expenses such as monthly bills, salary etc...<br/>
</p>
<p><br /><strong>V. FINAL WORDS</strong><br/></p>
<p style="text-align: left;">The biggest challenge I face while developing this application is debugging bugs. I took great care in eliminating any bugs arise every time new code lines are added. I&rsquo;ve done tests following a scope to make sure this application run seamlessly and implemented some fail-safe codes in case I missed something. However, there are so many other scenarios outside of my test scope that could produce software bugs. That&rsquo;s why I would really appreciate any feedback on bugs or suggestions on how to improve user&rsquo;s experience.<br /><br /></p>